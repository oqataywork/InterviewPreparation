Thread


Что такое многопоточность.


Поток----
		  \
		   => Планировщик => Определяет ядро, на котором выполнится процесс
		  / 	
Поток----

Управление потоками потребляет ресурсы
В некоторых случаях распраделение по ядрам/процессорам задача не тривиальная
Блокировка/синхронизация

Стандартизация использования
-ThreadingPool
-BackgroundWorker

Какие инструменты для работы с потоками есть в .NET
-Класс Thread. Он дает доступ не к самим потокам, а обертке над ними (ManagedThreads)
-ThreadPool, BackgroundWorker

Task - это надстройка над потоком Thread
Позволяет гибко управлять потоками
Даёт красивую асинхронность (async/await)

Чем отличиается thread от task?
Поток. Работая с тасками, мы минимизируем издержки по работе с потоками. Потому что task - это надстройка над потоками


Приложение может быть синхронным многопоточным, синхронным однопоточным и асинхронным многопоточным


Однопоточность - система в одном потоке работает со всеми задачами, выполняя их поочередно.

Многопоточность - речь о нескольких потоках, в которых выполнение задач идет одновременно и независимо друг от друга

Характеристики асинхронности:
-обрабатывает больеш запросов сервера, предоставляя потокам возможность обрабатывать больше запросов во время ожидания результата
от запросов ввода-вывода
-делает пользовательский интерфейс быстрым, выделяя потоки для обработки действий в пользовательском интерфейсе во время ожидания запросов
ввода-вывода, передавая затратные по времени операции другим ядрам ЦП

Для работы необходимы для ключевых слова async/await

async - используется в заголовке метода. Указывает на то, что метод может содержать одно или несколько выражений await
await - вызывающий метод содержит одно или несколько таких выражений

У асинхронного метода, который выполняет операцию могут быть следующие типы возвращаемых значений:
1) Task - выполняет операцию, но не возвращает значение
2)Task<TResult> - для асинх метода, возвращающего значение;
3) void - для обработчика событий (event e)
4) Поддерживается AsyncEnumerable, который возвращает асинхронный поток


Если речь идет о сложных многопользовательских приложениях, то стремиться стоит к использованию асинхронной модели, так как важна интерактивность и отзывчивость интерфейса





